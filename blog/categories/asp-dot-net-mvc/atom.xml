<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | Temple Coding]]></title>
  <link href="http://vintem.github.io/templecoding/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://vintem.github.io/templecoding/"/>
  <updated>2013-09-03T10:42:11-04:00</updated>
  <id>http://vintem.github.io/templecoding/</id>
  <author>
    <name><![CDATA[Thiago Temple]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC Model Binding]]></title>
    <link href="http://vintem.github.io/templecoding/blog/2013/05/20/asp-net-mvc-model-binding/"/>
    <updated>2013-05-20T00:00:00-04:00</updated>
    <id>http://vintem.github.io/templecoding/blog/2013/05/20/asp-net-mvc-model-binding</id>
    <content type="html"><![CDATA[<iframe src="http://www.youtube.com/embed/BjmRewB7tY4" frameborder="0" width="640" height="360"></iframe>


<h2>ASP.NET MVC Model Binding</h2>


<p>Nesse video explico o funcionamento do ASP.NET MVC Model Binding, começo com alguns exemplos básicos e depois mostro como criar um Model Binder Customizado.</p>

<p>Por fim, mostro como criar um Model Binder Provider que retorna um Model Binder customizado e genérico para usar junto com o Entity Framework, mas que obviamente poderia ser qualquer outro como NHibernate.</p>

<p><a href="https://github.com/vintem/ModelBindingDemo" target="_blank">O código está disponível no meu github.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inversão de Controle com Castle Windsor e ASP.NET MVC]]></title>
    <link href="http://vintem.github.io/templecoding/blog/2013/03/07/inversao-de-controle-com-castle-windsor-e-asp-net-mvc/"/>
    <updated>2013-03-07T00:00:00-05:00</updated>
    <id>http://vintem.github.io/templecoding/blog/2013/03/07/inversao-de-controle-com-castle-windsor-e-asp-net-mvc</id>
    <content type="html"><![CDATA[<iframe src="http://www.youtube.com/embed/zRoYsC6TkRE" frameborder="0" width="640" height="360"></iframe>


<h2>Inversão de Controle com Castle Windsor e ASP.NET MVC</h2>


<p>Demonstração usando ASP.NET MVC e Castle Windsor como container de inversão de controle.</p>

<p><a href="https://github.com/vintem/demoiocwindsor" target="_blank">O código está disponível no GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[001 - VideoCast - Produtividade com ASP.NET MVC 4]]></title>
    <link href="http://vintem.github.io/templecoding/blog/2012/09/25/001-videocast-produtividade-com-asp-net-mvc-4/"/>
    <updated>2012-09-25T00:00:00-04:00</updated>
    <id>http://vintem.github.io/templecoding/blog/2012/09/25/001-videocast-produtividade-com-asp-net-mvc-4</id>
    <content type="html"><![CDATA[<iframe src="http://www.youtube.com/embed/Zp_cLt69ee8" frameborder="0" width="640" height="360"></iframe>


<h2>Produtividade com ASP.NET MVC 4</h2>


<p>Nesse video eu mostro um pouco de como é possível obter Produtividade com ASP.NET MVC 4. O ASP.NET MVC vem melhorando a cada versão, e na versão quatro a nossa vida como programadores web ficou ainda mais fácil. E quem não gosta disso, não é?</p>

<h2>Alguns itens que falo no video</h2>


<ul>
    <li>Scaffolding de controllers e views</li>
    <li>Integração com o Entity Framework</li>
    <li>Autenticação usando OAuth</li>
    <li>WebAPI</li>
</ul>


<p>O código desse vídeo <a href="https://github.com/vintem/MVC4BlogDemo">está disponível no meu GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injeção de Dependência em Atributos/Filtros do MVC]]></title>
    <link href="http://vintem.github.io/templecoding/blog/2011/09/26/injecao-de-dependencia-em-atributosfiltros-do-mvc/"/>
    <updated>2011-09-26T00:00:00-04:00</updated>
    <id>http://vintem.github.io/templecoding/blog/2011/09/26/injecao-de-dependencia-em-atributosfiltros-do-mvc</id>
    <content type="html"><![CDATA[<p>É muito comum termos dropdowns/combos que contém o mesmo tipo de dados em páginas diferentes. Por exemplo digamos que seja necessário um combo com status em diferente páginas do projeto e que esses diferentes status tenham que vir do banco de dados.</p>

<p>Uma forma de mostrar isso na página, é salvar uma lista com os status que você pega do banco de dados na propriedade ViewData e exibir na página.</p>

<p>Como não devemos repetir esse código sempre, o que eu fiz foi criar um filtro do ASP.Net MVC e decorar as actions que precisam desses dados com esse filtro. Essa classe ficou assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ListaStatusAttribute</span> <span class="p">:</span> <span class="n">ActionFilterAttribute</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="n">OnActionExecuted</span><span class="p">(</span><span class="n">ActionExecutedContext</span> <span class="n">filterContext</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NHibernateRepository</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">tiposDocumento</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">FindAll</span><span class="p">().</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">t</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">t</span><span class="p">.</span><span class="n">Descricao</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">controllerBase</span> <span class="p">=</span> <span class="n">filterContext</span><span class="p">.</span><span class="n">Controller</span><span class="p">;</span>
</span><span class='line'>    <span class="n">controllerBase</span><span class="p">.</span><span class="n">ViewData</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Status&quot;</span><span class="p">,</span> <span class="n">tiposDocumento</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ótimo, agora é só decorar as actions com esse atributo. No ViewData teremos um item chamado Status com todos os status ordenados pela descricao. Um código feito uma vez só. Mas o que eu não gosto do código acima é que eu crio dentro da método uma instância da classe NHibernateRepository. Eu gostaria que isso fosse resolvido sem que uma dependência direta fosse criada para essa classe, afinal eu sei que essa classe implementa a interface IRepository, portanto eu posso ter uma dependência para a interface, o que é muito mais elegante.</p>

<p>Ultimamente eu tenho usado o <a href="http://docs.castleproject.org/Windsor.MainPage.ashx">Windsor</a> para resolver todas as minhas dependências. E nesse caso vou usá-lo em conjunto com o ServiceLocator da <a href="http://entlib.codeplex.com/">Microsoft Enterprise Library</a>. Se você já usa o Windsor é bem fácil de resolver, se não usa, dê uma olhada no tutorial no site do projeto e verá como é fácil usá-lo junto com o MVC.</p>

<p>Uma vez com seus componentes registrados, adicione uma referência para Microsoft.Practices.ServiceLocation.dll e no global.asax faça o seguinte:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">ServiceLocator</span><span class="p">.</span><span class="n">SetLocatorProvider</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">WindsorServiceLocator</span><span class="p">(</span><span class="n">container</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Isso vai adicionar ao ServiceLocator um provedor de serviços que será implementado usando o Windsor.
<a href="http://commonservicelocator.codeplex.com/wikipage?title=Castle%20Windsor%20Adapter&amp;referringTitle=Home&amp;ProjectName=commonservicelocator"> A classe WindsorServiceLocator pode ser encontrada para download aqui.</a></p>

<p>Pronto, agora dentro do meu atributo eu posso trocar o código para:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnActionExecuted</span><span class="p">(</span><span class="n">ActionExecutedContext</span> <span class="n">filterContext</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">ServiceLocator</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">GetInstance</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">tiposDocumento</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">FindAll</span><span class="p">().</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">t</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">t</span><span class="p">.</span><span class="n">Descricao</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">controllerBase</span> <span class="p">=</span> <span class="n">filterContext</span><span class="p">.</span><span class="n">Controller</span><span class="p">;</span>
</span><span class='line'><span class="n">controllerBase</span><span class="p">.</span><span class="n">ViewData</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Tipos&quot;</span><span class="p">,</span> <span class="n">tiposDocumento</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>E aquela dependência feia foi removida.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Globalização de validação do jQuery com o ASP.NET MVC 3]]></title>
    <link href="http://vintem.github.io/templecoding/blog/2011/09/17/globalizacao-de-validacao-do-jquery-com-o-asp-net-mvc-3/"/>
    <updated>2011-09-17T00:00:00-04:00</updated>
    <id>http://vintem.github.io/templecoding/blog/2011/09/17/globalizacao-de-validacao-do-jquery-com-o-asp-net-mvc-3</id>
    <content type="html"><![CDATA[<p>O Asp.Net MVC 3 tem uma ótima funcionalidade que é a validação no cliente usando o plugin do <a href="http://docs.jquery.com/Plugins/Validation" target="_blank">jQuery validations</a> e usando um script da própria Microsoft a validação é feita sem que seja necessário nenhum codificação especial. Basta usar os atributos do namespace <em>System.ComponentModel.DataAnnotations.</em></p>

<p>Pra quem não sabe, para fazer essa validação basta adicionar os seguintes scripts (que já estão no template padrão de um novo site Asp.Net Mvc 3):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">”/Scripts/jquery-1.6.2.min.js”</span> <span class="na">type=</span><span class="s">”text/javascript”</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">”/Scripts/jquery.validate.min.js”</span> <span class="na">type=</span><span class="s">”text/javascript”</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">”/Scripts/jquery.validate.unobtrusive.min.js”</span> <span class="na">type=</span><span class="s">”text/javascript”</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Muito simples de verdade! Mas existe um problema, esse script não é globalizado, então digamos que você tenha que usar uma data na sua classe e você gostaria de validá-la, por exemplo eu tinha uma classe que entre outras coisas tinha que salvar uma data, para simplificar, algo como isso:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Pessoa</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Sexo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Rg</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[DataType(DataType.EmailAddress)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[DataType(DataType.Date)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">DataNascimento</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Quando eu informava a data 16/09/1980, por exemplo, automaticamente era detectado uma data inválida, já que o esperado é que a data estivesse no padrão mm/dd/aaaa, mas é claro que no Brasil o padrão é outro. Então como corrigir? Primeiro fazer uso do plugin <a href="https://github.com/jquery/globalize">Globalize do jQuery</a>, adicione referências a dois scripts (que é claro, podem ser baixados no site do projeto).</p>

<p>Depois disso, tudo o que precisa ser feito é determinar qual a cultura que quer usar e indicar o parser do globalize para validar a data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Globalize</span><span class="p">.</span><span class="nx">culture</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">pt</span><span class="o">-</span><span class="nx">BR</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">validator</span><span class="p">.</span><span class="nx">methods</span><span class="p">.</span><span class="nx">date</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">optional</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">||</span> <span class="nx">Globalize</span><span class="p">.</span><span class="nx">parseDate</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Não podia ser mais simples!</p>
]]></content>
  </entry>
  
</feed>
