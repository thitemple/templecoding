<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | Temple Coding]]></title>
  <link href="http://templecoding.com/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://templecoding.com/"/>
  <updated>2013-08-04T14:36:35-04:00</updated>
  <id>http://templecoding.com/</id>
  <author>
    <name><![CDATA[Thiago Temple]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Publicando um site em ASP.NET MVC no IIS 6]]></title>
    <link href="http://templecoding.com/blog/2010/05/18/publicando-um-site-em-asp-net-mvc-no-iis-6/"/>
    <updated>2010-05-18T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2010/05/18/publicando-um-site-em-asp-net-mvc-no-iis-6</id>
    <content type="html"><![CDATA[<p>Publicar um site feito usando o ASP.NET MVC no servidor IIS não é tão simples como apenas copiar os arquivos, algumas configurações são necessárias:</p>

<p>1) Dentro do IIS abra as propriedades no seu site e na aba Home Directory, clique no botão Configuration. Dentro de Application Extensions, selecione a extensão .aspx e clique em Edit. Copie o conteúdo da caixa Executable como na figura abaixo e clique em Cancel.</p>

<p><img class="aligncenter" src="/images/2010/05/Extension.png" title="Extension" ></p>

<p>2) Clique no botão INSERT e cole o texto na caixa Executable e desmarque a opção Verify that file exists como na figura abaixo.</p>

<p><img class="aligncenter" src="/images/2010/05/Adicionar%20Extension.png" title="Adicionar Extension" ></p>

<p>3) Por último temos que &ldquo;adicionar uma extensão&rdquo; para as urls já que o IIS 6 exite que exista uma extensão. O jeito mais fácil de fazer é isso dentro do Global.asax.cs. Altere a rota padrão e suas outras rotas para que fiquem assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">RegisterRoutes</span><span class="p">(</span><span class="n">RouteCollection</span> <span class="n">routes</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">routes</span><span class="p">.</span><span class="n">IgnoreRoute</span><span class="p">(</span><span class="s">&quot;{resource}.axd/{*pathInfo}&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">routes</span><span class="p">.</span><span class="n">MapRoute</span><span class="p">(</span><span class="s">&quot;Default&quot;</span><span class="p">,</span> <span class="s">&quot;{controller}.mvc/{action}/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="p">{</span><span class="n">action</span> <span class="p">=</span> <span class="s">&quot;Index&quot;</span><span class="p">,</span> <span class="n">id</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">});</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Veja que depois do controller adicionei a extensão .mvc, agora todas as rotas funcionarão com o caminho /controler.mvc/action. É importante que para isso não existam urls fixas em suas páginas, apenas urls criadas usando os html helpers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodeTemplates com ASP.NET MVC]]></title>
    <link href="http://templecoding.com/blog/2010/05/03/codetemplates-com-asp-net-mvc/"/>
    <updated>2010-05-03T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2010/05/03/codetemplates-com-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>Toda a vez que você vai adicionar uma View usando o assistente do Visual Studio</p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_01-May.-03-15.23.gif" title="Adicionar View" ></p>

<p>Uma nova página é adiciona com um código pré-definido e baseado na opção que você escolheu  em &ldquo;View Content&rdquo;, o que muita gente não sabe é que dá para customizar todos esses modelos de página e é muito simples fazer isso.</p>

<h3>Adicionando os arquivos ao projeto</h3>


<p>Primeiro vá em <em>C:Program Files\Microsoft Visual Studio 9.0\Common7\IDE\ItemTemplates\CSharpWeb</em></p>

<p><span style="color: #808080;">Obs.: Veja que esse caminho vai variar de acordo com sua instalação e com a linguagem escolhida.</span></p>

<p><span>Se você tiver o ASP.NET MVC 1 e 2 instalados você deve encontrar duas pastas ali dentro chamadas respectivamente MVC e MVC2. Entre na pasta da versão escolhida copie a pasta CodeTemplates e cole na raíz do seu projeto web. Você deve acabar com um projeto assim:</span></p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_03-May.-03-15.47.gif"></p>

<p>O Visual Studio sempre vai procurar por esses arquivos localmente no projeto e se não encontrar buscará os arquivos na pasta informada acima.</p>

<h3>Configurando os arquivos</h3>


<p><span>Você já deve ter percebido não é? Existe um arquivo para cada template. Todas com uma extensão .tt que é a extensão do T4 (Text Template Transformation Toolkit).</span></p>

<p><span>O T4 é uma ferramenta de geração de código baseada em templates que vem nativa junto com o Visual Studio desde a versão 2005. Aliás, vale para o T4 um investimento de estudos já que é uma ferramenta muito útil.</span></p>

<p><span>A primeira coisa que precisa ser feita é selecionar todos os arquivos .tt ir na janela de propriedades e limpar o campo Custom Tool. Deixe em branco.</span></p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_05-May.-03-16.01.gif" title="T4 Custom Tool" ></p>

<h3>Alterando um template</h3>


<p>Agora vamos realmente alterar um template. Vamos supor que eu queira, ao exibir o detalhe de uma classe que ela fosse exibida dentro de uma tabela. Originalmente, as propriedades são exibidas em divs ao invés de tabelas (que na minha opinião, é a melhor opção).</p>

<p>Veja como ficou o arquivo Details.tt</p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_07-May.-03-19.02.gif" title="Details com tabela" ></p>

<p>Outra modificação que eu fiz na modelo de Details, foi, ao invés de exibir o título dentro de uma tag h2, eu exibo dentro da tag h1.</p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_08-May.-03-19.06.gif" title="Details com título H1" ></p>

<p>Pronto! Agora toda vez que for adiciona uma View com base no modelo Details ele seguirá esse padrão.</p>

<p>Uma outra coisa que pode ser feita é salvar um novo modelo dentro daquela pasta com outro nome, por exemplo, eu fiz essas alterações e salvei o arquivo como DetailsVintem.tt. Agora quando eu tento adicionar uma View essa opção fica disponível para mim.</p>

<p><img class="aligncenter" src="/images/2010/05/ScreenHunter_09-May.-03-19.09.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postando um objeto JSON para uma Action MVC2 com jQuery]]></title>
    <link href="http://templecoding.com/blog/2010/04/26/postando-um-objeto-json-para-uma-action-mvc2-com-jquery/"/>
    <updated>2010-04-26T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2010/04/26/postando-um-objeto-json-para-uma-action-mvc2-com-jquery</id>
    <content type="html"><![CDATA[<p>Há um tempo atrás eu postei <a href="http://templecoding.com/blog/2009/12/16/postando-um-objeto-json-para-uma-action-mvc-com-jquery/" target="_self">uma versão desse artigo</a> utilizando o Asp.Net MVC1.Agora, o MVC2 está no ar e com isso ficou mais fácil postar um objeto Json para uma action.</p>

<p>Para começar, baixe o <a href="http://aspnet.codeplex.com/releases/view/41742#DownloadId=110348" target="_blank">ASP.NET MVC2 Futures</a> e adicione uma referência no seu projeto para Microsoft.Web.Mvc.dll e no Global.asax.cs registre a chamada para o provedor do json, dessa forma:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_Start</span><span class="p">()</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">AreaRegistration</span><span class="p">.</span><span class="n">RegisterAllAreas</span><span class="p">();</span>
</span><span class='line'><span class="n">RegisterRoutes</span><span class="p">(</span><span class="n">RouteTable</span><span class="p">.</span><span class="n">Routes</span><span class="p">);</span>
</span><span class='line'><span class="n">ValueProviderFactories</span><span class="p">.</span><span class="n">Factories</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">JsonValueProviderFactory</span><span class="p">());</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Do lado do Asp.Net é só isso. Faça sua Action normalmente esperando um objeto, no meu caso eu segui o exemplo anterior com o caso do cliente:</p>

<p>Fiz uma classe Cliente</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Cnpj</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>E minha action ficou assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">JsonResult</span> <span class="nf">Criar</span><span class="p">(</span><span class="n">Cliente</span> <span class="n">cliente</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">return</span> <span class="n">Json</span><span class="p">(</span><span class="n">cliente</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Obviamente, essa não é uma action muito criativa, simplesmente está recebendo um objeto da classe Cliente e retornando como Json, mas aqui poderia ser feito qualquer coisa, não é necessário retornar um objeto json.</p>

<p>Por fim, para enviar um objeto json pelo jquery precisamos de um plugin, já que o jquery não faz isso nativamente. Eu usei o <a href="http://code.google.com/p/jquery-json/" target="_blank">jquery-json</a>, que tem um método toJSON para converter um objeto javascript para json.</p>

<p>Veja como ficou meu script:</p>

<p><img class="aligncenter" src="/images/2010/04/json_to_mvc.png" title="Json to MVC" ></p>

<p>Mas uma vez, um script sem muito segredo, estou pegando os valores de caixas de texto e montando meu objeto, depois convertendo a variável cliente para um objeto json armazenado na variável encoded e passando essa variável na chamada ajax para a action.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nova sintaxe para fazer Html Encoding com Asp.Net 4 e Asp.Net MVC 2]]></title>
    <link href="http://templecoding.com/blog/2010/04/19/nova-sintaxe-para-fazer-html-encoding-com-asp-net-4-e-asp-net-mvc-2/"/>
    <updated>2010-04-19T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2010/04/19/nova-sintaxe-para-fazer-html-encoding-com-asp-net-4-e-asp-net-mvc-2</id>
    <content type="html"><![CDATA[<p>Html Encoding faz parte de todo desenvolvimento web, principalmente para previnir ataques de <a href="http://imasters.uol.com.br/artigo/9879/seguranca/xss_cross_site_scripting/" target="_blank">Cross Site Scripting (XSS)</a> &ndash; quem não sabe o que é, recomendo ler esse artigo.</p>

<p>Até a versão 3.5 no Asp.Net para fazer Html Enconding tinhamos que fazer algo assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%= Server.HtmlEncode(algum_valor) %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>E no Asp.Net MVC algo assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%= Html.Encode(model.Valor) %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Isso sempre funcionou, mas agora existe uma nova possibilidade, que na minha opinião torna isso ainda mais simples:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%: mode.Valor %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>É só trocar o sinal de = pelo sinal : e automaticamente o encoding será realizado.</p>

<p>E isso vale também para os outros Html helpers do MVC, por exemplo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%: Html.TexboxFor(m =&gt; m.Valor) %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No código acima, o texto dentro do textbox já sairá codificado.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizando Templates no Asp.Net MVC2]]></title>
    <link href="http://templecoding.com/blog/2010/03/06/customizando-templates-no-asp-net-mvc2/"/>
    <updated>2010-03-06T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2010/03/06/customizando-templates-no-asp-net-mvc2</id>
    <content type="html"><![CDATA[<p>Customizar os templates padrão do Asp.Net MVC2 é muito fácil. Já mostrei antes <a href="http://templecoding.com/blog/2010/03/02/templates-no-asp-net-mvc2/">como usar os templates</a>, agora vou mostrar como customizar.</p>

<p>A primeira coisa que é preciso saber para customizar é que quando o MVC2 busca por customizações ele busca nas seguintes pastas:</p>

<ul>
    <li>~/Areas/NomeDaArea/Views/NomeDoController/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/Shared/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/NomeDoController/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/Shared/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/NomeDoController/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/Shared/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/NomeDoController/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/Shared/EditTemplates/TemplateName.aspx &amp; .ascx</li>
</ul>


<p>Veja que são principalmente duas pastas DisplayTemplates para os templates de exibição e EditTemplates para os de edição dispostas em alguns locais específicos.</p>

<p>Só para facilitar vou continuar o exemplo feito no post anterior que tinha as views Index.aspx e Edit.aspx e classe de model Cliente.cs como mostrados abaixo:</p>

<p><img class="aligncenter" src="/images/2010/03/Index_thumb.png" title="Index" ></p>

<p><img class="aligncenter" src="/images/2010/03/Edit_thumb.png" title="Edit" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">Ativo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[DisplayName(&quot;Data de Nascimento&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span> <span class="n">DataNascimento</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">decimal</span> <span class="n">Credito</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Cliente</span> <span class="nf">Criar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Cliente</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Thiago Temple&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">Ativo</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>         <span class="n">Credito</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
</span><span class='line'>         <span class="n">DataNascimento</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">1981</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Existem alguns templates pré-definidos no MVC2, são eles: String, Html, Boolean, Decimal, EmailAddress, HiddenInput, Html, Object, String, Text, Url e DateTime. Então para se customizar um desses campos tudo o que temos que fazer é criar um arquivo com o nome do template na pasta específica. Vamos imaginar que a idéia fosse que toda que vez que tivéssemos uma propriedade do tipo DateTime e ela fosse editável nós gostaríamos que o textbox fosse exibido com uma classe css específica e ao lado do campo aparecesse uma imagem para que o usuário pudesse clicar e selecionar a data de um calendário em javascript, por exemplo.</p>

<p>Temos então que criar um arquivo DateTime.ascx na pasta ~/Views/Shared/EditTemplates/ assim esse template estará disponível para todas as propriedades DateTime do nosso projeto. Veja como ficaria esse arquivo:</p>

<p><img class="aligncenter" src="/images/2010/03/DataTimeEdit_thumb.png" title="DataTime Edit" ></p>

<p>Isso vale para todos os tipos de templates pré-definidos. Seguindo o exemplo do post passado, se quisermos modificar a exibição da nossa classe cliente para que ela fique dentro de uma tabela, veja como ficará o template do arquivo ~/Views/Shared/DisplayTemplates/Object.ascx</p>

<p><img class="aligncenter" src="/images/2010/03/DisplayObject_thumb.png" title="Display Object" ></p>

<p>Dentro do objeto ViewData agora temos um objeto ModelMetadata que contém informações sobre a classe do Model que está sendo usada na view. Entre outras informações o que temos ali é uma coleção com todas as propriedades do model.</p>

<p>No exemplo acima primeiro exibimos o nome do model e depois fazemos um loop entre as propriedades do model exibindo as que estão marcadas com a opção ShowForDisplay = true, que é o padrão. Isso deve gerar uma página assim:</p>

<p><img class="aligncenter" src="/images/2010/03/ClienteDisplay_thumb.png" title="Cliente Display" ></p>

<p>Para o template de edit não é muito diferente, veja o arquivo ~/Views/Shared/EditTemplates/Object.ascx:</p>

<p><img class="aligncenter" src="/images/2010/03/ObjectEdit_thumb.png" title="Object Edit" ></p>

<p>Da mesma forma fazemos um loop nas propriedades do objeto ModelMetada que estão marcados com a propriedade ShowForEdit = true, novamente, esse é o padrão. Além disso, verifiquei se a propriedade é obrigatória e coloquei um * na frente do label. Veja o resultado:</p>

<p><img class="aligncenter" src="/images/2010/03/ClientEdit_thumb.png" title="Client Edit" ></p>

<p>Veja também que a modificação feita para o campo DateTime continuou valendo para a propriedade Data de Nascimento que foi exibida com a imagem do calendário ao lado do campo.</p>

<p><strong>Conclusão</strong></p>

<p>Os templates do MVC2 são uma forma simples e prática de exibir dados. Mas, o mais importante, são também muito poderosos para que sejam customizados da melhor forma possível para as necessidades específicas de cada projeto.</p>
]]></content>
  </entry>
  
</feed>
