<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Desenvolvimento | Temple Coding]]></title>
  <link href="http://templecoding.com/blog/categories/desenvolvimento/atom.xml" rel="self"/>
  <link href="http://templecoding.com/"/>
  <updated>2013-08-04T14:36:35-04:00</updated>
  <id>http://templecoding.com/</id>
  <author>
    <name><![CDATA[Thiago Temple]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Só é uma bagunça se você deixar. Responsabilidade única com JavaScript]]></title>
    <link href="http://templecoding.com/blog/2013/07/30/responsabilidade-unica-com-javascript/"/>
    <updated>2013-07-30T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2013/07/30/responsabilidade-unica-com-javascript</id>
    <content type="html"><![CDATA[<p>Muita gente que reclama de JavaScript mas não se dá ao mínimo trabalho de entender a linguagem e, boa parte das vezes, não trata o código desenvolvido como um código de verdade, afinal de contas &ldquo;é só JavaScript mesmo&rdquo;.</p>

<p>Mas esse é só uma das razões de boa parte dos problemas enfrentados quando a gente tem que dar manutenção em um código já existente. O bom e velho spaguetti de código.</p>

<p><a href="http://templecoding.com/wp-content/uploads/2013/07/spagett.jpg"><img class="aligncenter size-full wp-image-1399" alt="Código spaghetti" src="http://templecoding.com/wp-content/uploads/2013/07/spagett.jpg" width="425" height="282" /></a></p>

<p>Tenho que admitir que eu já contribui para bastante código spaguetti (como do exemplo que vou mostrar aqui). Exatamente porque não tratei esse código como um programa sério e não apliquei princípios básicos como o da <a href="http://robsoncastilho.com.br/2013/02/06/principios-solid-principio-da-responsabilidade-unica-srp/" target="_blank">responsabilidade única</a>.</p>

<p>Vamos imaginar uma cesta de compras como a da imagem abaixo, que tem um link para atualizar a quantidade de itens do carrinho. O código que vou mostrar, captura o click no link usando o jQuery e faz uma validação de que o valor informado no campo é numérico. A regra de negócio diz ainda que tem que ser uma quantidade entre 0 e 10. Não posso vender mais do que 10 unidades de um mesmo item.</p>

<p><a href="http://templecoding.com/wp-content/uploads/2013/07/shopping_basket.png"><img class="aligncenter size-full wp-image-1392" alt="shopping_basket" src="http://templecoding.com/wp-content/uploads/2013/07/shopping_basket.png" width="413" height="69" /></a></p>

<p>Um código que faria isso é esse:</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">  $(document).ready(function() {
    $(".update_cart").click(function(e) {
      e.preventDefault();
      var itemsCount = $(this).closest("td").prev()
        .children(".quantity").val();
      if(isNaN(itemsCount) || parseInt(itemsCount, 10) &lt; 0 ||          parseInt(itemsCount, 10) &gt; 10) {
          showError("Nao é numero valido");
          return;
      }
      $.ajax({
        url: '/updatecart',
        data: {
          // lógica para formatar os dados a serem enviados para o servidor
        },
        success: function(data) {
          // update table with cart data
        },
        error: function(xhr, status, error) {
          // handle error
        }
      });
    });
  });</pre>


<p>Embora esse seja um código simples &ndash; e que está pouco mais curto do que realmente seria já que eu omiti alguns detalhes da implementação &ndash; ele viola um dos princípios de desenvolvimento mais importantes na minha opinião, que é o princípio da responsabilidade única. Mas, é um código que nós vemos com bastante facilidade em muitos aplicações na web.</p>

<p>Mesmo que a gente não tenha classes em JavaScript, as funções são usadas para fazer separações de responsabilidades. Veja, no exemplo acima, a função responsável por responder ao evento de click de atualização faz a validação, faz a chamada ajax e também atualiza a página após o resultado, seja com sucesso ou não.</p>

<p>Fazendo uma breve analogia, a chamada ajax como essa acima, pode ser comparada a uma chamada de um web service feito por um código C# ou Java. Ou seja, é um serviço externo ao código que está sendo executado, ou melhor ainda, é uma dependência externa que está gerando acoplamento no código. Taí a primeira separação que a gente pode fazer.</p>

<p>Outra ponto, o script acima lê informações da página (DOM) e depois atualiza informações nessa mesma página de acordo com o retorno do processamento. Então, em uma outra analogia, pode-se dizer que o DOM nesse caso, é uma forma de banco de dados do programa, portanto, é outra dependência externa que a gente pode separar no código.</p>

<p>Então vamos ver o que seria um código melhor estruturado para esse caso.</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">$(document).ready(function() {

  function BasketUpdater (basketView, basketService) {
    this.init = function() {
      basketView.handleUpdate(this.update);
    }

    this.isValid = function(item) {
      var quantity = item.quantity;
      return !isNaN(itemsCount) &amp;&amp; 
        parseInt(itemsCount, 10) &gt;= 0 &amp;&amp; parseInt(itemsCount, 10) &lt;= 10
    }

    this.update = function(item) {
      if(this.isValid(item)) {
        basketService.update(item, 
          basketView.refreshViewSuccess, basketView.refreshViewError)
      }
    }
  }

  function BasketView() {
    this.handleUpdate = function(callback) {
      $(".update_cart").click(function(e) {
        e.preventDefault();
        // logica para formatar um objeto com os dados do item no formulario
        callback(item);
      }
    }

    this.refreshViewSuccess = function() {
      // 
    }

    this.refreshViewError = function() {
      // 
    }
  }

  function BasketService(url) {
    this.update = function(item, callbackSuccess, callbackError) {
      $.ajax({
        url: url,
        data: item,
        success: function(data) {
          algum codigo para formatar os dados de retorno
          callbackSuccess(data);
        },
        error: function(xhr, status, error) {
          // algum codigo para tratar a mensagem de erro
          callbackError(error);
        }
      });
    }
  }

  var basketService = new BasketService('http://localhost/updateCart');
  var basketView = new BasketView();
  var basketUpdater = new BasketUpdater(basketView, basketService);

  basketUpdater.init();

});</pre>


<p>Mesmo que esse código seja um tanto quanto mais extenso que o anterior, fica bem clara a divisão de responsabilidades. Temos uma função para atualizar a view <em>BasketView</em>, uma para fazer a chamada ajax <em>BasketService</em> e uma com a lógica de negócio necessária para a página <em>BasketUpdater</em>.</p>

<p>Os benefícios de um código como esse (comparado com o anterior) são muitos, e bem semelhantes aos que a gente vê em códigos &ldquo;servidor&rdquo; bem estruturados.</p>

<ol>
    <li>As dependências necessárias para que um objeto funcione (sim, uma função em JavaScript é um objeto) estão claras e definidas já no construtor.</li>
    <li>Uma função não depende explicitamente de outra, ela apenas espera um objeto que implemente determinados métodos</li>
    <li>É possível testar as funções isoladamente com um framework de testes</li>
    <li>É possível utilizar injeção de dependência e no caso dos testes, usar mocks</li>
    <li>É possível alterar uma função sem interferir na outra (desde que os nomes dos métodos se mantenham os mesmos)</li>
</ol>


<p>Para concluir, temos um código muito mais organizado, de fácil manutenção e com responsabilidades claras. Para chegar nesse resultado, fiz uso apenas de técnicas já conhecidas de outras linguagens e sem inventar muita coisa. Então da próxima vez que você for dizer que é muito difícil dar manutenção em código JavaScript, pense se você está contribuindo para um código sustentável ou só preparando o almoço do próximo domingo.</p>

<p><a href="http://templecoding.com/wp-content/uploads/2013/07/Spaghetti.gif"><img class="aligncenter size-full wp-image-1401" alt="Spaghetti" src="http://templecoding.com/wp-content/uploads/2013/07/Spaghetti.gif" width="245" height="184" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programação orientada à coincidência]]></title>
    <link href="http://templecoding.com/blog/2013/07/16/programacao-orientada-a-coincidencia/"/>
    <updated>2013-07-16T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2013/07/16/programacao-orientada-a-coincidencia</id>
    <content type="html"><![CDATA[<p>Eu gosto muito de programar, gosto dos desafios técnicos que programar que traz. Mas o que eu mais gosto é do constante aprendizado que faz parte da profissão de programador.</p>

<p>Por causa de tudo isso eu nunca entendi ou gostei de frases como &ldquo;se esta funcionando não mexe&rdquo; ou &ldquo;não encosta nesse código porque senão para de funcionar&rdquo;. Como alguém que gosta de aprender, minha primeira pergunta é: porque para de funcionar? Ou, porque não pode mexer? Ou, o que vai estragar?</p>

<p>Informações sobre os mais diversos assuntos estão disponíveis de forma muito fácil (para uns até um pouco mais que para outros, não é NSA?) então não vejo sentido de não buscar se aprofundar nos assuntos. <a href="http://www.hanselman.com/">Scott Hanselman</a>, em um ótimo post, já disse que <a href="http://vintem.me/1dAms6P" target="_blank">a internet não é uma caixa preta</a>. Citando uma frase desse post que resume o que eu quero dizer:</p>

<blockquote>When coding on the web, remember that effectively NOTHING is hidden from you.</blockquote>


<p>NADA esta escondido de você, enfase no NADA.</p>

<p>No livro <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=tempcodi0f-20">The Pragmatic Programmer</a>, Andrew Hunt e David Thomas dedicam um capitulo à programação por coincidência e eles abrem o capitulo com uma metáfora muito interessante. Eles comparam um programador que codifica por tentativa e erro, resolvendo problemas de forma aleatórias e sem conhecimento sobre o assunto à um soldado andando em um campo minado. O soldado pode dar um, dois, vários passos sem pisar em uma mina, achar que esta fazendo algo correto, mas é somente uma caminhada aleatória, uma hora ele pode pisar em uma mina e explodir.</p>

<p><a href="http://templecoding.com/programacao-orientada-a-coincidencia/falklands-minefield1/" rel="attachment wp-att-1335"><img class="aligncenter size-full wp-image-1335" title="falklands-minefield1" src="http://templecoding.com/wp-content/uploads/2013/07/falklands-minefield1.jpg" alt="" width="426" height="282" /></a></p>

<p>Outra coisa bem comum quando não se entende do problema, é a tendencia de resolver as coisas sempre do mesmo jeito, ou seja é o velho caso daquela frase &ldquo;se você só tem um martelo todo o problema é um prego&rdquo;. Parece que é uma formula magica, funcionou para um problema não se sabe como, deve funcionar para os outros.</p>

<p>Ainda nesse sentido, pode ser que um problema seja resolvido passando dados inválidos
para um método e que isso resulte numa resposta inesperada do programa. Mas se a sua unica fonte de analise for a resposta daquela chamada com dados inválidos, quando aquele programa for corrigido, sua chamada não vai mais funcionar porque aquela coincidência foi modificada.</p>

<p>[caption id=&ldquo;attachment_1329&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;265&rdquo;]<a href="http://templecoding.com/programacao-orientada-a-coincidencia/coincidence1/" rel="attachment wp-att-1329"><img class="wp-image-1329     " title="coincidence" src="http://templecoding.com/wp-content/uploads/2013/07/coincidence1.jpg" alt="" width="265" height="235" /></a> Parece um coelho, mas&hellip;[/caption]</p>

<p>E o pior na minha opinião, é a ignorância que isso gera. Até hoje ainda vejo gente que acha que POST é mais seguro do que GET só porque os dados não são enviados na URL!</p>

<p><strong>Escolhendo a pilula vermelha</strong></p>

<iframe src="http://templecoding.com//www.youtube.com/embed/xFhn_GUAhGU" frameborder="0" width="420" height="315"></iframe>


<p>E sim, entender e aprender as coisas dá trabalho, toma tempo, tomar a pilula vermelha às vezes quer dizer por em prática para aprender, ou, como já disse um Yogi Berra:</p>

<blockquote>Mastering knowledge alone, without experience isn't effective</blockquote>


<p>Ou, numa tradução livre e direta: <em>Dominar um assunto sem a pratica não é efetivo.</em></p>

<p><strong>Mas até onde ir?</strong></p>

<p>Essa é uma linha difícil de traçar. De uma forma geral eu tento entender o suficiente para resolver o problema que eu estou enfrentando, e qualquer outra coisa, eu deixo para ler mais tarde.</p>

<p>Por exemplo, eu estava estudando Backbone.js usando <a href="http://vintem.me/12QNKkh" target="_blank">esse tutorial</a>, e nele é usado o <a href="http://vintem.me/15yM296" target="_blank">padrão AMD</a> implementado pelo <a href="http://requirejs.org/" target="_blank">Require.JS</a>. Eu podia simplesmente seguir o tutorial que isso resolveria o problema, mas o que eu decidi fazer foi ler um pouco sobre o Require.JS no seu site para entender o seu funcionamento e depois ler sobre o padrão AMD quando eu tivesse um pouco mais de tempo. Esse tutorial, também usa o Node.js, ou seja, depois eu ainda fui explorar um pouco sobre o Node.js :)</p>

<p>É claro, não existe uma regra, e ninguém pode dizer até onde cada um deve ir, você é quem tem que traçar a linha entre o que é informação necessária e o que é procrastinação, sempre tentando ser pragmático.</p>

<p>O mais importante de tudo é deixar a preguiça de lado e entender o que você faz. Não basta pegar a primeira resposta no StackOverflow. Afinal de contas, você também não ia gostar que um médico te receitasse um medicamento só porque esse remédio funciona para a dor de barriga de outra pessoa, você quer que ele te examine e te diga porque esse remédio vai funcionar, não é?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrar é traduzir, não é reproduzir]]></title>
    <link href="http://templecoding.com/blog/2013/03/21/integrar-e-traduzir-nao-e-reproduzir/"/>
    <updated>2013-03-21T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2013/03/21/integrar-e-traduzir-nao-e-reproduzir</id>
    <content type="html"><![CDATA[<p>Eu trabalho fazendo integrações de aplicações web com o SAP há alguns anos já. E existem &ldquo;alguns padrões&rdquo; (vou chamar de padrões), que existem no SAP que são bem particulares à esse ERP.</p>

<p>Só para ambientar aqueles que não conhecem nada de SAP, o SAP é um grande ERP e ele possui todo um ecossistema próprio para customização e criação de soluções de negócio. Por exemplo, ele tem uma linguagem própria o <a href="https://en.wikipedia.org/wiki/Abap">ABAP</a>, tem um protocolo de comunicações proprietário, o <a href="https://en.wikipedia.org/wiki/Remote_function_call">RFC</a>, entre outras coisas. Fora isso, existe também toda uma cultura particular de desenvolvimento, que honestamente, eu não conheço muito, já que nunca fui um programador ABAP.</p>

<p><a href="http://templecoding.com/integrar-e-traduzir-nao-e-reproduzir/system_integration/" rel="attachment wp-att-1231"><img class="alignleft size-full wp-image-1231" title="system_integration" src="http://templecoding.com/wp-content/uploads/2013/03/system_integration.jpeg" alt="" width="240" height="150" /></a>A minha questão aqui é, independente do porque, e se esta certo ou não, geralmente quando faço integrações com o SAP encontro coisas que não estou acostumado a ver quando desenvolvo minhas soluções usando outras tecnologias, como por exemplo, .NET e C#.</p>

<p>Por exemplo, em muitas integrações que fiz com o SAP quando chamo uma função remota e essa gera um erro, ao invés de receber um exceção, a chamada é executada com sucesso e uma estrutura de dados (como na imagem abaixo) é retornada preenchida contendo um tipo de erro, um código e possivelmente algumas mensagens. Esse é um padrão usado e que já vi várias vezes.</p>

<p><a href="http://templecoding.com/integrar-e-traduzir-nao-e-reproduzir/sap_return/" rel="attachment wp-att-1224"><img class="aligncenter  wp-image-1224" title="sap_return" src="http://templecoding.com/wp-content/uploads/2013/03/sap_return.png" alt="Retorno de erros no SAP" width="446" height="319" /></a></p>

<p>Obs.: <a href="http://cc2e.com/Page.aspx?hid=147" target="_blank">Steven McConnell deve ficar tão orgulhoso disso</a>.</p>

<p>OK, mas qual é o problema disso e o que tem a ver com o que eu faço?</p>

<p>Bom, o problema na minha opinião, é quando esse tipo de padrão começa a vazar para outras aplicações. Tenho que admitir que eu já fiz a minha parte de permitir que isso vazasse. Shame on me!</p>

<p>Mas voltando, se estamos fazendo uma integração com uma aplicação terceira, não importa qual, e ela tem uma particularidade, não precisamos expor essa particularidade, podemos encapsulá-la e mudar o padrão para algo mais genérico, ou que faça sentido para a nossa plataforma de desenvolvimento. Por exemplo, no caso de um Web Service, lançar um SoapException.</p>

<p>Outro padrão comum ao SAP é a nomenclatura de estruturas. Não sei porque, mas encontramos muitas estruturas com esse tipo de nomenclatura.</p>

<p><a href="http://templecoding.com/integrar-e-traduzir-nao-e-reproduzir/nomes_sap/" rel="attachment wp-att-1223"><img class="aligncenter size-full wp-image-1223" title="Nomenclatura_SAP" src="http://templecoding.com/wp-content/uploads/2013/03/nomes_sap.png" alt="Nomenclatura no SAP" width="247" height="434" /></a></p>

<p>Talvez isso faça sentido na cabeça de algum alemão louco, mas, voltando ao C#, um nome de variável pode ter até 1023 bytes, isso quer dizer que podemos ser bem mais descritivos que isso. E no caso de um Web Service também, não ha uma limitação especifica para o nome de uma tag XML.</p>

<p>Mais uma vez o ponto é, no momento em que estamos fazendo uma integração, seja qual for a tecnologia utilizada (no meu caso é o BizTalk), esse é o momento de abstrair particularidades, de aplicar boas práticas para quem vai consumir essa integração.<a href="http://templecoding.com/integrar-e-traduzir-nao-e-reproduzir/images_boo/" rel="attachment wp-att-1232"><img class="alignright size-full wp-image-1232" title="images_boo" src="http://templecoding.com/wp-content/uploads/2013/03/images_boo.jpeg" alt="" width="255" height="197" /></a></p>

<p>Eu vejo uma integração como uma tradutora. Ela ouve em alemão e traduz para português, ela não traduz algumas partes para português e mantém outras no formato original. Para mim, que não falo nada de alemão, isso só me atrapalharia.</p>

<p>E nem sempre é uma questão de certo ou errado, mas sim de pontos que são mais idiomáticos em uma tecnologia do que em outra. Nesse caso o problema são as traduções literais que muitas vezes não fazem sentido, temos que contextualizar para a tecnologia que estamos usando.</p>

<p><a href="http://templecoding.com/integrar-e-traduzir-nao-e-reproduzir/slip/" rel="attachment wp-att-1230"><img class="aligncenter size-full wp-image-1230" title="slip" src="http://templecoding.com/wp-content/uploads/2013/03/slip.png" alt="" width="249" height="263" /></a>Mais uma vez usando o SAP como <del>bode expiatório</del> exemplo, existem alguns casos em que as strings não podem ter mais do 132 caracteres, por isso vemos estruturas como a anterior que tem campos message1, message2, message3, etc., e, embora isso funcione, é uma limitação daquela plataforma/tecnologia. Esse não é o caso de um XML ou do próprio C#, portanto, passar uma estrutura dessas adiante é simplesmente fazer uma tradução literal e não olhar para o contexto.</p>

<p>Concluindo, quando for integrar duas ou mais aplicações, tenha em mente os limites tecnológicos, funcionais e semânticos de cada ponta. Leve em consideração o que é um padrão proprietário e deve ser transformado do que realmente é um padrão de integração e deve ser mantido. <a href="http://www.amazon.com/gp/product/0321200683/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321200683&amp;linkCode=as2&amp;tag=tempcodi0f-20" target="_blank">Existem inclusive livros que podem nos ajudar com isso</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loops for in no JavaScript]]></title>
    <link href="http://templecoding.com/blog/2013/03/11/loops-for-in-no-javascript/"/>
    <updated>2013-03-11T00:00:00-04:00</updated>
    <id>http://templecoding.com/blog/2013/03/11/loops-for-in-no-javascript</id>
    <content type="html"><![CDATA[<p>O JavaScript tem o suporte nativo a loops do tipo <em>for in</em> e, ele funciona de uma forma muito semelhante ao <em>foreach</em> do C# (por exemplo), mas temos que tomar alguns cuidados, por que como tudo no JavaScript, sempre temos uma pegadinha.</p>

<div style="margin: 5px 0px; border: #f48432 1px dashed; padding: 5px;">

<strong>Sofrendo menos com JavaScript</strong>
Esse post faz parte de uma série, confira os outros já feitos:
<ol>
    <li><a href="http://templecoding.com/declarao-de-variveis-com-javascript/">Declaração de variáveis com JavaScript</a></li>
    <li><a href="http://templecoding.com/elevao-em-javascript/">Elevação em JavaScript</a></li>
    <li><a href="http://templecoding.com/converter-numeros-em-javascript-e-uma-droga/">Converter números em JavaScript é uma droga</a></li>
    <li><a href="http://templecoding.com/javascript-ponto-virgula/">JavaScript e o problema com o ponto e vírgula</a></li>
    <li><a href="http://templecoding.com/escopo-no-javascript/">Escopo no JavaScript: esse this não é daqui</a></li>
    <li><a href="http://templecoding.com/funcoes-de-callback-no-javascript/">Funções de callback</a></li>
    <li><a href="http://templecoding.com/tratamento-de-excecoes-em-javascript/">Tratamento de exceções em JavaScript</a></li>
    <li><a href="http://templecoding.com/construtores-de-arrays-do-javascript/">Construtores de Arrays</a></li>
    <li>Loops for in</li>
</ol>
</div>


<p>Primeiro um exemplo. Se eu quiser iterar por todas as propriedades é métodos de um objeto o código é exatamente o que imaginamos.</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">var propriedade;
var pessoa = {
    nome: 'Thiago',
    sobrenome: 'Temple',
    dizOla: function() {
        alert('Ola');
    }
};
for(propriedade in pessoa){
    document.writeln(propriedade);
}
//exibe: nome sobrenome dizOla</pre>


<p>Esse código produz um retorno com: nome sobrenome dizOla</p>

<p>Se eu quiser exibir somente os atributos e não os métodos, eu preciso adicionar um filtro no loop, dessa forma:</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">for(propriedade in pessoa){
    if (typeof pessoa[propriedade] !== 'function') {
        document.writeln(propriedade);
    };
}
//exibe: nome sobrenome</pre>


<p>Até aqui bem simples.</p>

<p>O primeiro ponto a considerar é que nunca podemos garantir a ordem do retorno de um loop for in. Geralmente isso não importaria muito, como no exemplo anterior, mas no caso de um array, que é também um objeto, isso pode ser importante. Nesse momento é melhor usar mesmo um loop for do que um loop for in.</p>

<p>A segundo ponto a considerar é que o JavaScript tem herança através da propriedade prototype, e que todo objeto herda de Object. Isso é importante porque o JavaScript é uma linguagem dinâmica e, portanto, se alterarmos Object isso vai refletir nos nossos objetos, não importa o momento que alteramos Object. Por exemplo:</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">var propriedade;
var pessoa = {
    nome: 'Thiago',
    sobrenome: 'Temple',
    dizOla: function() {
        alert('Ola');
    }
};

Object.prototype.naoRelacionado = 'eu nao devia estar aqui';

for(propriedade in pessoa){
    document.writeln(propriedade);
}

//exibe: nome sobrenome dizOla naoRelacionado</pre>


<p>No código acima eu defini um objeto chamado pessoa e depois disso eu adicionei um atributo chamado naoRelacionado à Object. Mesmo assim esse atributo foi exibido dentro loop for in. Isso pode vir a ser um problema quando alteramos o prototype de Object em outra parte do código que não esta relacionado ao código que estamos fazendo.</p>

<p>No caso do loop for in, podemos resolver isso com o método <strong>hasOwnProperty</strong>.</p>

<pre class="brush: js; ruler: true; smart-tabs: false;">for(propriedade in pessoa){
    if(pessoa.hasOwnProperty(propriedade)) {
        document.writeln(propriedade);
    }
}

//exibe: nome sobrenome dizOla</pre>


<p>O método hasOwnProperty verifica se a propriedade foi definida no objeto em questão.</p>

<p>É isso ai.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Construtores de Arrays do JavaScript]]></title>
    <link href="http://templecoding.com/blog/2013/02/18/construtores-de-arrays-do-javascript/"/>
    <updated>2013-02-18T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2013/02/18/construtores-de-arrays-do-javascript</id>
    <content type="html"><![CDATA[<p>Bom, o ano começou, lá se foi o carnaval e agora sim podemos dizer que o ano começou. Pelo menos aqui no blog. <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://templecoding.com/wp-content/uploads/2013/02/wlEmoticon-smile.png" alt="Alegre" /></p>

<p>Bora falar um pouco mais de JavaScript e o que existe de estranho com os <strong>construtores de Arrays do JavaScript</strong>.</p>

<div style="margin: 5px 0px; border: #f48432 1px dashed; padding: 5px;">

<strong>Sofrendo menos com JavaScript</strong>
Esse post faz parte de uma série, confira os outros já feitos:
<ol>
    <li><a href="http://templecoding.com/declarao-de-variveis-com-javascript/">Declaração de variáveis com JavaScript</a></li>
    <li><a href="http://templecoding.com/elevao-em-javascript/">Elevação em JavaScript</a></li>
    <li><a href="http://templecoding.com/converter-numeros-em-javascript-e-uma-droga/">Converter números em JavaScript é uma droga</a></li>
    <li><a href="http://templecoding.com/javascript-ponto-virgula/">JavaScript e o problema com o ponto e vírgula</a></li>
    <li><a href="http://templecoding.com/escopo-no-javascript/">Escopo no JavaScript: esse this não é daqui</a></li>
    <li><a href="http://templecoding.com/funcoes-de-callback-no-javascript/">Funções de callback</a></li>
    <li><a href="http://templecoding.com/tratamento-de-excecoes-em-javascript/">Tratamento de exceções em JavaScript</a></li>
    <li>Construtores de Arrays</li>
    <li><a href="http://templecoding.com/loops-for-in-no-javascript/">Loops for in</a></li>
</ol>
</div>


<h2>Construtores de Arrays do JavaScript</h2>


<p>No JavaScript podemos construir um Array da seguinte forma:</p>

<pre class="brush: js;">var a = new Array("texto");
console.log(a.length); // 1
console.log(a[0]); // texto</pre>


<p>Quando passamos uma string ou outro tipo de objeto para o construtor de uma Array, o JavaScript cria uma array com um item e atribui o valor passado para esse item.</p>

<p>Agora vamos dar uma olhada em outro exemplo:</p>

<pre class="brush: js;">var a = new Array(3);
console.log(a.length) // 3
console.log(a[0]); // undefined</pre>


<p>Quando passamos um número inteiro para o construtor ele cria um array com o número de elementos informados e, todos os elementos criados não tem um valor atribuído a eles, por isso o undefined.</p>

<p>Um terceiro exemplo:</p>

<pre class="brush: js;">var a = new Array(3.2); // RangeError: invalid array length</pre>


<p>Quando passamos um número decimal para o construtor, ele obviamente não cria um array decimal, mas também não cria um array com um só elemento e com o valor passado, o JavaScript retorna um erro para esse comando.</p>

<h2>Uma prática um pouco melhor</h2>


<p>A melhor forma de criar arrays no JavaScript é usando o construtor implícito dele, por exemplo:</p>

<pre class="brush: js;">var a = ["texto"]; // Cria um elemento e atribui o valor a ele

var b = [1, 2, 3]; // Cria um array com 3 elementos e com os valores 1, 2 e 3</pre>


<p>Um problema simples de resolver esse, não é?</p>
]]></content>
  </entry>
  
</feed>
