<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: templates | Temple Coding]]></title>
  <link href="http://templecoding.com/blog/categories/templates/atom.xml" rel="self"/>
  <link href="http://templecoding.com/"/>
  <updated>2013-08-04T14:36:35-04:00</updated>
  <id>http://templecoding.com/</id>
  <author>
    <name><![CDATA[Thiago Temple]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customizando Templates no Asp.Net MVC2]]></title>
    <link href="http://templecoding.com/blog/2010/03/06/customizando-templates-no-asp-net-mvc2/"/>
    <updated>2010-03-06T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2010/03/06/customizando-templates-no-asp-net-mvc2</id>
    <content type="html"><![CDATA[<p>Customizar os templates padrão do Asp.Net MVC2 é muito fácil. Já mostrei antes <a href="http://templecoding.com/blog/2010/03/02/templates-no-asp-net-mvc2/">como usar os templates</a>, agora vou mostrar como customizar.</p>

<p>A primeira coisa que é preciso saber para customizar é que quando o MVC2 busca por customizações ele busca nas seguintes pastas:</p>

<ul>
    <li>~/Areas/NomeDaArea/Views/NomeDoController/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/Shared/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/NomeDoController/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/Shared/DisplayTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/NomeDoController/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Areas/NomeDaArea/Views/Shared/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/NomeDoController/EditTemplates/TemplateName.aspx &amp; .ascx</li>
    <li>~/Views/Shared/EditTemplates/TemplateName.aspx &amp; .ascx</li>
</ul>


<p>Veja que são principalmente duas pastas DisplayTemplates para os templates de exibição e EditTemplates para os de edição dispostas em alguns locais específicos.</p>

<p>Só para facilitar vou continuar o exemplo feito no post anterior que tinha as views Index.aspx e Edit.aspx e classe de model Cliente.cs como mostrados abaixo:</p>

<p><img class="aligncenter" src="/images/2010/03/Index_thumb.png" title="Index" ></p>

<p><img class="aligncenter" src="/images/2010/03/Edit_thumb.png" title="Edit" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">Ativo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[DisplayName(&quot;Data de Nascimento&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span> <span class="n">DataNascimento</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">decimal</span> <span class="n">Credito</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Cliente</span> <span class="nf">Criar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Cliente</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Thiago Temple&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">Ativo</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>         <span class="n">Credito</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
</span><span class='line'>         <span class="n">DataNascimento</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">1981</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Existem alguns templates pré-definidos no MVC2, são eles: String, Html, Boolean, Decimal, EmailAddress, HiddenInput, Html, Object, String, Text, Url e DateTime. Então para se customizar um desses campos tudo o que temos que fazer é criar um arquivo com o nome do template na pasta específica. Vamos imaginar que a idéia fosse que toda que vez que tivéssemos uma propriedade do tipo DateTime e ela fosse editável nós gostaríamos que o textbox fosse exibido com uma classe css específica e ao lado do campo aparecesse uma imagem para que o usuário pudesse clicar e selecionar a data de um calendário em javascript, por exemplo.</p>

<p>Temos então que criar um arquivo DateTime.ascx na pasta ~/Views/Shared/EditTemplates/ assim esse template estará disponível para todas as propriedades DateTime do nosso projeto. Veja como ficaria esse arquivo:</p>

<p><img class="aligncenter" src="/images/2010/03/DataTimeEdit_thumb.png" title="DataTime Edit" ></p>

<p>Isso vale para todos os tipos de templates pré-definidos. Seguindo o exemplo do post passado, se quisermos modificar a exibição da nossa classe cliente para que ela fique dentro de uma tabela, veja como ficará o template do arquivo ~/Views/Shared/DisplayTemplates/Object.ascx</p>

<p><img class="aligncenter" src="/images/2010/03/DisplayObject_thumb.png" title="Display Object" ></p>

<p>Dentro do objeto ViewData agora temos um objeto ModelMetadata que contém informações sobre a classe do Model que está sendo usada na view. Entre outras informações o que temos ali é uma coleção com todas as propriedades do model.</p>

<p>No exemplo acima primeiro exibimos o nome do model e depois fazemos um loop entre as propriedades do model exibindo as que estão marcadas com a opção ShowForDisplay = true, que é o padrão. Isso deve gerar uma página assim:</p>

<p><img class="aligncenter" src="/images/2010/03/ClienteDisplay_thumb.png" title="Cliente Display" ></p>

<p>Para o template de edit não é muito diferente, veja o arquivo ~/Views/Shared/EditTemplates/Object.ascx:</p>

<p><img class="aligncenter" src="/images/2010/03/ObjectEdit_thumb.png" title="Object Edit" ></p>

<p>Da mesma forma fazemos um loop nas propriedades do objeto ModelMetada que estão marcados com a propriedade ShowForEdit = true, novamente, esse é o padrão. Além disso, verifiquei se a propriedade é obrigatória e coloquei um * na frente do label. Veja o resultado:</p>

<p><img class="aligncenter" src="/images/2010/03/ClientEdit_thumb.png" title="Client Edit" ></p>

<p>Veja também que a modificação feita para o campo DateTime continuou valendo para a propriedade Data de Nascimento que foi exibida com a imagem do calendário ao lado do campo.</p>

<p><strong>Conclusão</strong></p>

<p>Os templates do MVC2 são uma forma simples e prática de exibir dados. Mas, o mais importante, são também muito poderosos para que sejam customizados da melhor forma possível para as necessidades específicas de cada projeto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Templates no Asp.Net MVC2]]></title>
    <link href="http://templecoding.com/blog/2010/03/02/templates-no-asp-net-mvc2/"/>
    <updated>2010-03-02T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2010/03/02/templates-no-asp-net-mvc2</id>
    <content type="html"><![CDATA[<p>Uma das grandes novidades do Asp.Net MVC2 são os templates. Quem já fez algum projeto usando o Dynamic Data do WebForms vai ver que essa funcionalidade é bem parecida com a do Dynamic Data.</p>

<p>O framework agora é capaz de exibir um dado em um formato específico de acordo com o tipo de dados (integer, decimal, boolean, ou mesmo uma classe).</p>

<p>Como isso funciona? A forma mais simples é utililando o método <strong>Html.DisplayForModel. </strong>Vejamos, dado a classe de modelo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">Ativo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span> <span class="n">DataNascimento</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">decimal</span> <span class="n">Credito</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Cliente</span> <span class="nf">Criar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Cliente</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Nome</span> <span class="p">=</span> <span class="s">&quot;Thiago Temple&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Email</span> <span class="p">=</span> <span class="s">&quot;eu@vintem.com.br&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Ativo</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Credito</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
</span><span class='line'>        <span class="n">DataNascimento</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">1981</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Uma view dessa forma:</p>

<p><img class="aligncenter" src="/images/2010/03/Html-Index.png" title="Html Index" ></p>

<p>E um controller:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ClienteController</span> <span class="p">:</span> <span class="n">Controller</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">ViewResult</span> <span class="n">Index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">Cliente</span><span class="p">.</span><span class="n">Criar</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">ViewResult</span> <span class="nf">Edit</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">Cliente</span><span class="p">.</span><span class="n">Criar</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[HttpPost]</span>
</span><span class='line'><span class="k">public</span> <span class="n">ViewResult</span> <span class="nf">Edit</span><span class="p">(</span><span class="n">Cliente</span> <span class="n">cliente</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ModelState</span><span class="p">.</span><span class="n">IsValid</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="s">&quot;Index&quot;</span><span class="p">,</span> <span class="n">cliente</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">cliente</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Então ao chamarmos a Action Index do nosso controller veremos:</p>

<p><img class="aligncenter" src="/images/2010/03/Template-Index.png" title="Template Index" >
<img class="aligncenter size-full wp-image-228" title="Template Index" src="http://templecoding.com/wp-content/uploads/2010/03/Template-Index.png" alt="" width="355" height="374" /></p>

<p>Veja que os nomes das propriedades aparecem nos labels e os campos já estão formatados como o booleano, data e decimal.</p>

<p>Para a action Edit, temos um método similar <strong>Html.EditForModel</strong></p>

<p><img class="aligncenter" src="/images/2010/03/Html-Edit.png" title="Html Edit" ></p>

<p>Que vai exibir um visualização assim:</p>

<p><img class="aligncenter" src="/images/2010/03/Template-Edit.png" title="Template Edit" ></p>

<p>Simples não? Mas e se eu quiser exibir &ldquo;Data de Nascimento&rdquo; ao invés de DataNascimento no label? Basta decorar a propriedade com o atributo DisplayName do namespace System.ComponentModel assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="n">Ativo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[DisplayName(&quot;Data de Nascimento&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span> <span class="n">DataNascimento</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">decimal</span> <span class="n">Credito</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Existem alguns atributos disponíveis para customizar o modelo, são eles:</p>

<ul>
    <li>[HiddenInput] (System.Web.Mvc) - usando esse atributo será gerado um campo hidden no modo Edit</li>
    <li>[DataType] (System.ComponentModel.DataAnnotations) - Define o tipo de dados da propriedade</li>
    <li>[ReadOnly] (System.ComponentModel) - Deixará a propriedade como ReadOnly</li>
    <li>[DisplayFormat] (System.ComponentModel.DataAnnotations) - Definir a propriedade NullDisplayText exibe um texto para quando o valor for nulo.  Informar a propriedade DataFormatString define em qual formato o texto deverá ser exibido. Informar a propriedade ApplyFormatInEditMode como true irá usar o formato também no modo Edit. Informar a propriedade ConvertEmptyStringToNull irá converter uma string vazia para  nulo.</li>
    <li>[DisplayName] (System.ComponentModel) - Define o nome da propriedade</li>
</ul>


<p><strong>Exibindo campos específicos</strong></p>

<p>Se for o caso de exibir ou editar apenas alguns campos do modelo, pode-se utililzar os métodos <strong>Html.DisplayFor(model =&gt; model.Propriedade) </strong>e <strong>Html.EditFor(model =&gt; model.Propriedade)</strong>.</p>

<p><strong>Conclusão</strong></p>

<p>É muito simples gerar uma visualização a partir dos assistentes do visual studio, mas isso irá gerar um código estático. Se você quiser uma forma mais prática com base nas propriedades do modelo basta usar os novos métodos. Existe também uma forma de customizar a exibição das propriedades. Vou mostrar isso num próximo post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validação com Asp.Net MVC2 parte 3 - Input vs Model validation]]></title>
    <link href="http://templecoding.com/blog/2010/02/22/validacao-com-asp-net-mvc2-parte-3-input-vs-model-validation/"/>
    <updated>2010-02-22T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2010/02/22/validacao-com-asp-net-mvc2-parte-3-input-vs-model-validation</id>
    <content type="html"><![CDATA[<p>Obs.: Esse post está baseado na versão RC2 do Asp.Net MVC2.</p>

<p>O Asp.Net MVC 1 já possuía uma forma de realizar validações, como as validações Required ou Regular Expression que <a href="http://templecoding.com/blog/2010/02/07/validacao-com-asp-net-mvc2/">eu já mostrei aqui em outros posts</a>, além dessa validação o framework também avisaria/perceberia erros ao submeter um formulário com dados inválidos, exemplo: enviar uma string com &ldquo;xxxxx&rdquo; para uma propriedade de data ou não enviar um valor para um campo que não fosse nullable, como, por exemplo, um campo int.</p>

<p>Vamos olhar uma classe de modelo como a classe Cliente abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">int</span> <span class="n">IdCliente</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o nome&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha a idade&quot;)]</span>
</span><span class='line'><span class="na">[Range(0, 150, ErrorMessage=&quot;Idade inválida&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">int?</span> <span class="n">Idade</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o email&quot;)]</span>
</span><span class='line'><span class="na">[RegularExpression(@&quot;^[A-Za-z0-9._%+-]</span><span class="p">+</span><span class="err">@</span><span class="p">[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z0</span><span class="p">-</span><span class="m">9.</span><span class="p">-]+.[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">}</span><span class="err">$</span><span class="s">&quot;, ErrorMessage = &quot;</span><span class="n">Email</span> <span class="n">inválido</span><span class="s">&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage=&quot;Preencha o Cpf&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Cpf</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>E um formuário como o abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%: Html.ValidationSummary() %&gt;
</span><span class='line'><span class="nt">&lt;fieldset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;legend&gt;</span>Fields<span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Nome) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Nome) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%: Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Nome) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Idade) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Idade) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%: Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Idade) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Email) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%: Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Email) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%: Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Email) %<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>input type=&quot;submit&quot; value=&quot;Create&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/fieldset&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Repare que o modelo tem uma propriedade Cpf decorada com o atributo Required e no formulário essa propriedade não existe. No MVC1 ou até o RC1 do MVC2, se submetêssemos esse formulário, o campo Cpf não seria exigido. Isso é o que é conhecido como Input validation, ou seja, apenas os dados que são submetidos pelo formulário são validados. A partir do MVC RC2, esse campo também é validado, e isso é conhecido como Model validation.</p>

<p>Vou alterar a classe Cliente para ter um Endereco, como abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">int</span> <span class="n">IdCliente</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o nome&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha a idade&quot;)]</span>
</span><span class='line'><span class="na">[Range(0, 150, ErrorMessage=&quot;Idade inválida&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">int?</span> <span class="n">Idade</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o email&quot;)]</span>
</span><span class='line'><span class="na">[RegularExpression(@&quot;^[A-Za-z0-9._%+-]</span><span class="p">+</span><span class="err">@</span><span class="p">[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z0</span><span class="p">-</span><span class="m">9.</span><span class="p">-]+.[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">}</span><span class="err">$</span><span class="s">&quot;, ErrorMessage = &quot;</span><span class="n">Email</span> <span class="n">inválido</span><span class="s">&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage=&quot;Preencha o Cpf&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Cpf</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">Endereco</span> <span class="n">Endereco</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">Endereco</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;[</span><span class="n">Required</span><span class="p">]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Logradouro</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Cidade</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Bairro</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Veja que a propriedade Endereco não é obrigatória na classe Cliente. O que isso quer dizer? Que no Model Validation, se eu não informar nenhum atributo da classe Endereco, o endereço pode ser nulo.</p>

<p>Se eu mantiver o formulário como estava e não adicionar nenhuma outra caixa de texto ao enviar o formulário ele não vai validar o endereço. Agora vou alterar o formulário para que ele tenha o Cpf e a Cidade do Cliente. Assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationSummary()%&gt;
</span><span class='line'><span class="nt">&lt;fieldset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;legend&gt;</span>Fields<span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Nome)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Nome)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Nome)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Idade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Idade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Idade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Email)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Email)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Email)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Cpf)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Cpf)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Cpf)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-label&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.LabelFor(model =<span class="ni">&amp;gt;</span> model.Endereco.Cidade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;editor-field&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>%= Html.TextBoxFor(model =<span class="ni">&amp;gt;</span> model.Endereco.Cidade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>%= Html.ValidationMessageFor(model =<span class="ni">&amp;gt;</span> model.Endereco.Cidade)%<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>input value=&quot;Create&quot; type=&quot;submit&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/fieldset&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Apenas o campo Cidade foi adicionada, mas ao submeter o formulário as propriedades Logradouro e Bairro também são validados.</p>

<p>Ou seja, agora a validação é feita sempre no Model e não mais de acordo com os dados que são informados.</p>

<p>Por que isso é importante? Principalmente porque alguém mal intensionado poderia tentar enviar um request de post com apenas parte dos dados. Nas versões anteriores do MVC isso não seria validado automaticamente.</p>

<p>Um ponto importante a se considerar são os atributos que não podem ser nulos como no caso do Int. Imagine que na nossa classe Cliente a propriedade Idade não fosse decorada com o atributo Required. Nas versões anteriores do MVC se o campo Idade não fosse preenchido um erro &ldquo;A value is required&rdquo; seria retornado, isso acontece no momento do model-binding, quando framework tenta identificar se existe um valor submetido para uma propriedade, no caso idade, que por padrão não pode ser nula.</p>

<p>A partir do MVC RC2 essa propriedade seria preenchida com o seu valor padrão, que no caso do int é 0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validação com Asp.NET MVC2 parte 2 - validações customizadas]]></title>
    <link href="http://templecoding.com/blog/2010/02/18/validacao-com-asp-net-mvc2-parte-2-validacoes-customizadas/"/>
    <updated>2010-02-18T00:00:00-05:00</updated>
    <id>http://templecoding.com/blog/2010/02/18/validacao-com-asp-net-mvc2-parte-2-validacoes-customizadas</id>
    <content type="html"><![CDATA[<p>Dando sequência no<a href="http://templecoding.com/blog/2010/02/07/validacao-com-asp-net-mvc2/"> post anterior sobre a validação no MVC2</a>, vou mostrar como é simples fazer uma validação customizada além das existentes no namespace System.ComponenteModel.DataAnnotations.</p>

<p>Para fazer uma validação customizada tudo que precisamos fazer é herdar a classe ValidationAttribute do namespace System.ComponentModel.DataAnnotations, isso, claro, para fazer uma validação genérica, é possível também herdar as outras classes de validação desse namespace como RequiredAttribute, RegularExpressionAttribute e assim por diante.</p>

<p>Por exemplo, e seguindo o exemplo do post anterior, vamos imaginar que para cadastrar um novo cliente em nossa base, além das validações que já estamos fazendo, queremos garantir que o email do cliente seja único na base. Podemos fazer o seguinte, criamos uma classe ClienteUnicoAttribute que herda de ValidationAttribute e ai decoramos o atributo email da classe cliente com o nosso validador.</p>

<p>A classe ClienteUnicoAttribute fica assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ClienteUnicoAttribute</span> <span class="p">:</span> <span class="n">ValidationAttribute</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="n">IsValid</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// validação real vai aqui</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(!</span><span class="k">value</span><span class="p">.</span><span class="n">ToString</span><span class="p">().</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;teste@teste.com&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Simples, o importante aqui é sobrescrever o método IsValid com a lógica que queremos, no caso aqui, para manter simples, estou apenas verificando se o email é igual <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x74;&#x65;&#x73;&#x74;&#x65;&#x40;&#x74;&#101;&#115;&#116;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#101;&#x40;&#x74;&#x65;&#x73;&#x74;&#x65;&#46;&#x63;&#111;&#x6d;</a> então retorno false, caso contrário retorno true.</p>

<p>Na classe Cliente vamos decorar o atributo Email com o novo validador e fica assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Cliente</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">int</span> <span class="n">IdCliente</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o nome&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Nome</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha a idade&quot;)]</span>
</span><span class='line'><span class="na">[Range(0, 150, ErrorMessage=&quot;Idade inválida&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">int?</span> <span class="n">Idade</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[Required(ErrorMessage = &quot;Preencha o email&quot;)]</span>
</span><span class='line'><span class="na">[RegularExpression(@&quot;^[A-Za-z0-9._%+-]</span><span class="p">+</span><span class="err">@</span><span class="p">[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z0</span><span class="p">-</span><span class="m">9.</span><span class="p">-]+.[</span><span class="n">A</span><span class="p">-</span><span class="n">Za</span><span class="p">-</span><span class="n">z</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">}</span><span class="err">$</span><span class="s">&quot;, ErrorMessage = &quot;</span><span class="n">Email</span> <span class="n">inválido</span><span class="s">&quot;)]</span>
</span><span class='line'><span class="na">[ClienteUnico(ErrorMessage=&quot;Email de cliente já cadastrado&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora, se tentarmos cadastrar um cliente com email <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#116;&#101;&#115;&#116;&#x65;&#x40;&#116;&#x65;&#x73;&#x74;&#101;&#46;&#x63;&#111;&#x6d;">&#116;&#101;&#115;&#x74;&#x65;&#64;&#116;&#x65;&#x73;&#x74;&#x65;&#46;&#x63;&#111;&#x6d;</a> veremos o erro:</p>

<p><img class="aligncenter" src="/images/2010/02/Email-ja-cadastrado.png" title="Email já cadastrado" ></p>
]]></content>
  </entry>
  
</feed>
